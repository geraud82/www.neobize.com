const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const nodemailer = require('nodemailer');
const dotenv = require('dotenv');
const jwt = require('jsonwebtoken');
const multer = require('multer');
const path = require('path');
const fs = require('fs');

// Importer la configuration de la base de donn√©es et les mod√®les
const { testConnection } = require('./config/database');
const { syncDatabase } = require('./models');

// Importer les routes
const contactRoutes = require('./routes/contactRoutes');
const projectRoutes = require('./routes/projectRoutes');

// Charger les variables d'environnement
dotenv.config();

const app = express();
const PORT = process.env.PORT || 5001;

// Middleware
// Configure CORS for different environments
const corsOptions = {
  origin: process.env.NODE_ENV === 'production' 
    ? [process.env.FRONTEND_URL || 'https://neobize.vercel.app'] 
    : 'http://localhost:3000',
  credentials: true,
  optionsSuccessStatus: 200
};
app.use(cors(corsOptions));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Secret pour JWT
const JWT_SECRET = process.env.JWT_SECRET || 'neobize-secret-key';

// Informations d'authentification (√† remplacer par une base de donn√©es en production)
let authCredentials = {
  username: 'admin',
  password: 'password'
};

// Middleware d'authentification
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ success: false, message: 'Acc√®s non autoris√©' });
  }
  
  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ success: false, message: 'Token invalide ou expir√©' });
    }
    
    req.user = user;
    next();
  });
};

// Stockage temporaire des cat√©gories (√† remplacer par une base de donn√©es en production)
let categories = [
  { id: 'web-dev', name: 'D√©veloppement Web' },
  { id: 'transport', name: 'Transport & Logistique' },
  { id: 'construction', name: 'Construction & BTP' }
];

// Stockage temporaire des articles (√† remplacer par une base de donn√©es en production)
let blogPosts = [
  {
    id: 1,
    title: 'Les tendances du d√©veloppement web en 2025',
    excerpt: 'D√©couvrez les derni√®res tendances et technologies qui fa√ßonnent le d√©veloppement web cette ann√©e.',
    content: `
      <h2>Les tendances du d√©veloppement web en 2025</h2>
      <p>Le monde du d√©veloppement web √©volue constamment, avec de nouvelles technologies et approches qui √©mergent chaque ann√©e. En 2025, plusieurs tendances majeures fa√ßonnent la fa√ßon dont les d√©veloppeurs cr√©ent des sites web et des applications.</p>
      <h3>1. L'essor des applications progressives (PWA)</h3>
      <p>Les Progressive Web Apps continuent de gagner en popularit√©, offrant une exp√©rience utilisateur similaire √† celle des applications natives tout en fonctionnant dans un navigateur web.</p>
      <h3>2. L'adoption g√©n√©ralis√©e de WebAssembly</h3>
      <p>WebAssembly permet d'ex√©cuter du code √† des vitesses proches du natif dans le navigateur, ouvrant la porte √† des applications web plus performantes et complexes.</p>
      <h3>3. Le d√©veloppement sans t√™te (Headless)</h3>
      <p>Les CMS headless s√©parent le backend du frontend, offrant plus de flexibilit√© aux d√©veloppeurs pour cr√©er des exp√©riences personnalis√©es.</p>
    `,
    category: 'web-dev',
    author: 'Marie Laurent',
    date: '15 avril 2025',
    readTime: '5 min',
    image: 'https://placehold.co/800x500/1E40AF/FFFFFF?text=Web+Dev+Trends',
    tags: ['D√©veloppement Web', 'Tendances', 'Technologies'],
    published: true
  },
  {
    id: 2,
    title: 'Comment optimiser votre cha√Æne logistique',
    excerpt: 'Apprenez les meilleures pratiques pour optimiser votre cha√Æne logistique et r√©duire les co√ªts de transport.',
    content: `
      <h2>Comment optimiser votre cha√Æne logistique</h2>
      <p>Une cha√Æne logistique efficace est essentielle pour toute entreprise qui souhaite rester comp√©titive sur le march√© actuel. Voici quelques strat√©gies pour optimiser vos op√©rations logistiques.</p>
      <h3>1. Automatisation des processus</h3>
      <p>L'automatisation des t√¢ches r√©p√©titives peut consid√©rablement am√©liorer l'efficacit√© et r√©duire les erreurs humaines dans votre cha√Æne logistique.</p>
      <h3>2. Analyse des donn√©es en temps r√©el</h3>
      <p>Utiliser des outils d'analyse de donn√©es pour surveiller les performances de votre cha√Æne logistique en temps r√©el vous permet de prendre des d√©cisions √©clair√©es rapidement.</p>
      <h3>3. Collaboration avec les fournisseurs</h3>
      <p>Une communication transparente et une collaboration √©troite avec vos fournisseurs peuvent aider √† r√©duire les d√©lais et √† am√©liorer la qualit√© des produits.</p>
    `,
    category: 'transport',
    author: 'Pierre Martin',
    date: '28 mars 2025',
    readTime: '7 min',
    image: 'https://placehold.co/800x500/1E40AF/FFFFFF?text=Logistics',
    tags: ['Logistique', 'Transport', 'Optimisation'],
    published: true
  }
];

// Initialiser la base de donn√©es
const initializeDatabase = async () => {
  try {
    await testConnection();
    await syncDatabase();
    console.log('üöÄ Base de donn√©es PostgreSQL initialis√©e avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation de la base de donn√©es:', error);
    process.exit(1);
  }
};

// Routes principales
app.get('/', (req, res) => {
  res.json({
    message: 'API NEOBIZE est en ligne !',
    version: '2.0.0',
    database: 'PostgreSQL',
    timestamp: new Date().toISOString()
  });
});

// Route de test simple
app.get('/api/hello', (req, res) => {
  res.json({
    success: true,
    message: 'Hello from NEOBIZE API!',
    timestamp: new Date().toISOString()
  });
});

// Utiliser les routes
app.use('/api/contacts', contactRoutes);
app.use('/api/projects', projectRoutes);

// Route d'authentification
app.post('/api/auth/login', (req, res) => {
  const { username, password } = req.body;
  
  // V√©rification des identifiants
  if (username === authCredentials.username && password === authCredentials.password) {
    // G√©n√©rer un token JWT
    const token = jwt.sign({ username }, JWT_SECRET, { expiresIn: '24h' });
    
    res.status(200).json({
      success: true,
      message: 'Authentification r√©ussie',
      token
    });
  } else {
    res.status(401).json({
      success: false,
      message: 'Nom d\'utilisateur ou mot de passe incorrect'
    });
  }
});

// Routes pour les articles de blog
app.get('/api/blog/posts', async (req, res) => {
  try {
    res.status(200).json({
      success: true,
      data: blogPosts.filter(post => post.published)
    });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des articles:', error);
    res.status(500).json({
      success: false,
      message: 'Une erreur est survenue lors de la r√©cup√©ration des articles'
    });
  }
});

// Routes pour les cat√©gories
app.get('/api/categories', async (req, res) => {
  try {
    res.status(200).json({
      success: true,
      data: categories
    });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des cat√©gories:', error);
    res.status(500).json({
      success: false,
      message: 'Une erreur est survenue lors de la r√©cup√©ration des cat√©gories'
    });
  }
});

// Routes prot√©g√©es pour la gestion des cat√©gories
app.get('/api/admin/categories', authenticateToken, async (req, res) => {
  try {
    res.status(200).json({
      success: true,
      data: categories
    });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des cat√©gories:', error);
    res.status(500).json({
      success: false,
      message: 'Une erreur est survenue lors de la r√©cup√©ration des cat√©gories'
    });
  }
});

app.post('/api/admin/categories', authenticateToken, async (req, res) => {
  try {
    const { id, name } = req.body;
    
    if (!id || !name) {
      return res.status(400).json({
        success: false,
        message: 'L\'identifiant et le nom sont requis'
      });
    }
    
    if (categories.some(cat => cat.id === id)) {
      return res.status(400).json({
        success: false,
        message: 'Une cat√©gorie avec cet identifiant existe d√©j√†'
      });
    }
    
    const newCategory = { id, name };
    categories.push(newCategory);
    
    res.status(201).json({
      success: true,
      message: 'Cat√©gorie cr√©√©e avec succ√®s',
      data: newCategory
    });
  } catch (error) {
    console.error('Erreur lors de la cr√©ation de la cat√©gorie:', error);
    res.status(500).json({
      success: false,
      message: 'Une erreur est survenue lors de la cr√©ation de la cat√©gorie'
    });
  }
});

app.delete('/api/admin/categories/:id', authenticateToken, async (req, res) => {
  try {
    const categoryId = req.params.id;
    const initialLength = categories.length;
    
    if (categories.length <= 1) {
      return res.status(400).json({
        success: false,
        message: 'Vous devez conserver au moins une cat√©gorie'
      });
    }
    
    categories = categories.filter(cat => cat.id !== categoryId);
    
    if (categories.length === initialLength) {
      return res.status(404).json({
        success: false,
        message: 'Cat√©gorie non trouv√©e'
      });
    }
    
    res.status(200).json({
      success: true,
      message: 'Cat√©gorie supprim√©e avec succ√®s'
    });
  } catch (error) {
    console.error('Erreur lors de la suppression de la cat√©gorie:', error);
    res.status(500).json({
      success: false,
      message: 'Une erreur est survenue lors de la suppression de la cat√©gorie'
    });
  }
});

// Route pour mettre √† jour les informations d'authentification
app.put('/api/admin/credentials', authenticateToken, async (req, res) => {
  try {
    const { username, currentPassword, newPassword } = req.body;
    
    if (!username) {
      return res.status(400).json({
        success: false,
        message: 'Le nom d\'utilisateur est requis'
      });
    }
    
    if (currentPassword !== authCredentials.password) {
      return res.status(401).json({
        success: false,
        message: 'Le mot de passe actuel est incorrect'
      });
    }
    
    // Mettre √† jour le nom d'utilisateur
    authCredentials.username = username;
    
    // Mettre √† jour le mot de passe si un nouveau est fourni
    if (newPassword) {
      authCredentials.password = newPassword;
    }
    
    res.status(200).json({
      success: true,
      message: 'Informations d\'authentification mises √† jour avec succ√®s'
    });
  } catch (error) {
    console.error('Erreur lors de la mise √† jour des informations d\'authentification:', error);
    res.status(500).json({
      success: false,
      message: 'Une erreur est survenue lors de la mise √† jour des informations d\'authentification'
    });
  }
});

// Routes prot√©g√©es pour l'administration des articles
app.get('/api/admin/posts', authenticateToken, async (req, res) => {
  try {
    res.status(200).json({
      success: true,
      data: blogPosts
    });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des articles:', error);
    res.status(500).json({
      success: false,
      message: 'Une erreur est survenue lors de la r√©cup√©ration des articles'
    });
  }
});

app.post('/api/admin/posts', authenticateToken, async (req, res) => {
  try {
    const newPost = {
      id: Date.now(),
      ...req.body,
      date: new Date().toLocaleDateString('fr-FR', { year: 'numeric', month: 'long', day: 'numeric' })
    };
    
    blogPosts.unshift(newPost);
    
    res.status(201).json({
      success: true,
      message: 'Article cr√©√© avec succ√®s',
      data: newPost
    });
  } catch (error) {
    console.error('Erreur lors de la cr√©ation de l\'article:', error);
    res.status(500).json({
      success: false,
      message: 'Une erreur est survenue lors de la cr√©ation de l\'article'
    });
  }
});

app.put('/api/admin/posts/:id', authenticateToken, async (req, res) => {
  try {
    const postId = parseInt(req.params.id);
    const postIndex = blogPosts.findIndex(post => post.id === postId);
    
    if (postIndex === -1) {
      return res.status(404).json({
        success: false,
        message: 'Article non trouv√©'
      });
    }
    
    const updatedPost = {
      ...blogPosts[postIndex],
      ...req.body
    };
    
    blogPosts[postIndex] = updatedPost;
    
    res.status(200).json({
      success: true,
      message: 'Article mis √† jour avec succ√®s',
      data: updatedPost
    });
  } catch (error) {
    console.error('Erreur lors de la mise √† jour de l\'article:', error);
    res.status(500).json({
      success: false,
      message: 'Une erreur est survenue lors de la mise √† jour de l\'article'
    });
  }
});

app.delete('/api/admin/posts/:id', authenticateToken, async (req, res) => {
  try {
    const postId = parseInt(req.params.id);
    const initialLength = blogPosts.length;
    
    blogPosts = blogPosts.filter(post => post.id !== postId);
    
    if (blogPosts.length === initialLength) {
      return res.status(404).json({
        success: false,
        message: 'Article non trouv√©'
      });
    }
    
    res.status(200).json({
      success: true,
      message: 'Article supprim√© avec succ√®s'
    });
  } catch (error) {
    console.error('Erreur lors de la suppression de l\'article:', error);
    res.status(500).json({
      success: false,
      message: 'Une erreur est survenue lors de la suppression de l\'article'
    });
  }
});

// Configuration de multer pour le t√©l√©chargement d'images
const uploadDir = path.join(__dirname, 'uploads');

// Cr√©er le r√©pertoire d'uploads s'il n'existe pas
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

// Configurer le stockage pour multer
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    // G√©n√©rer un nom de fichier unique avec timestamp
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const ext = path.extname(file.originalname);
    cb(null, uniqueSuffix + ext);
  }
});

// Filtrer les types de fichiers accept√©s
const fileFilter = (req, file, cb) => {
  // Accepter uniquement les images
  if (file.mimetype.startsWith('image/')) {
    cb(null, true);
  } else {
    cb(new Error('Seules les images sont autoris√©es'), false);
  }
};

// Initialiser multer
const upload = multer({ 
  storage: storage,
  fileFilter: fileFilter,
  limits: {
    fileSize: 10 * 1024 * 1024 // Limite √† 10MB
  }
});

// Servir les fichiers statiques du r√©pertoire uploads
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Route pour le t√©l√©chargement d'images
app.post('/api/admin/upload', authenticateToken, upload.single('image'), (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        message: 'Aucun fichier n\'a √©t√© t√©l√©charg√©'
      });
    }
    
    // Construire l'URL de l'image
    const imageUrl = `${req.protocol}://${req.get('host')}/uploads/${req.file.filename}`;
    
    res.status(200).json({
      success: true,
      message: 'Image t√©l√©charg√©e avec succ√®s',
      data: imageUrl
    });
  } catch (error) {
    console.error('Erreur lors du t√©l√©chargement de l\'image:', error);
    res.status(500).json({
      success: false,
      message: error.message || 'Une erreur est survenue lors du t√©l√©chargement de l\'image'
    });
  }
});

// Gestionnaire d'erreurs global
app.use((error, req, res, next) => {
  console.error('Erreur non g√©r√©e:', error);
  res.status(500).json({
    success: false,
    message: 'Erreur interne du serveur'
  });
});

// D√©marrer le serveur
const startServer = async () => {
  try {
    await initializeDatabase();
    
    app.listen(PORT, () => {
      console.log(`üöÄ Serveur NEOBIZE en cours d'ex√©cution sur le port ${PORT}`);
      console.log(`üìä Base de donn√©es: PostgreSQL`);
      console.log(`üåê API disponible sur: http://localhost:${PORT}`);
    });
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage du serveur:', error);
    process.exit(1);
  }
};

startServer();
